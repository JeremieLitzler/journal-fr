const enableLogs = false;

/**
 *
 * @param {String} str value to hash
 * @param{Int} seed for alternate streams of the same input
 * @returns
 * @see https://blog.trannhat.xyz/generate-a-hash-from-string-in-javascript/
 */
const Cyrb53 = (str, seed = 0) => {
  let h1 = 0xdeadbeef ^ seed,
    h2 = 0x41c6ce57 ^ seed;
  for (let i = 0, ch; i < str.length; i++) {
    ch = str.charCodeAt(i);
    h1 = Math.imul(h1 ^ ch, 2654435761);
    h2 = Math.imul(h2 ^ ch, 1597334677);
  }
  h1 =
    Math.imul(h1 ^ (h1 >>> 16), 2246822507) ^
    Math.imul(h2 ^ (h2 >>> 13), 3266489909);
  h2 =
    Math.imul(h2 ^ (h2 >>> 16), 2246822507) ^
    Math.imul(h1 ^ (h1 >>> 13), 3266489909);
  return 4294967296 * (2097151 & h2) + (h1 >>> 0);
};

/**
 * Build the index the following way:
 * - from the markdown content found in each page ("page.content").
 * - split the content with the space character
 * - clean up the word (see CleanupWords)
 * - distribute the word in a json object with a list of slug and title where a word is found
 *
 * @param {Object} pagesData The list of pages generated by VuePress
 * @returns The index
 */
exports.BuildIndex = (pagesData) => {
  if (enableLogs)
  {
    console.log("SearchIndexBuilder: page count = ", pagesData.length);
  }

  let searchIndex = {};
  pagesData.forEach((page) => {
    BuildPageIndex(page, searchIndex)
  });
  if (enableLogs)
  {
    console.log('SearchIndex :\n', searchIndex);
  }
  return searchIndex;
};

BuildPageIndex = (page, searchIndex) => 
{
  const cleanedPageContent = GetCleanedPageContent(page);
  const cleanedWords = GetCleanedWords(cleanedPageContent)
  
  if (enableLogs) 
  {
    console.log(cleanedWords);
  }
  this.DistributeHashedWords(searchIndex, cleanedWords, page);
  // => add the current page path to each hashed word
  //if (enableLogs) console.log('Done with page => ', page.path);
}

GetCleanedPageContent = (page) =>
{
  let content = page.content;
  content = CleanWindowsNewlineToSpace(content);
  content = CleanPunctuationToSpace(content);
  return content;
}

CleanWindowsNewlineToSpace = (content) =>
{
  // => clear \r\n occurence
  return content.replace(/\r\n/g, " ");
}

CleanPunctuationToSpace = (content) =>
{
  // => clear common punctuations (: ; , ! ?)
  //See https://stackoverflow.com/questions/4328500/how-can-i-strip-all-punctuation-from-a-string-in-javascript-using-regex 
  return content.replace(/[.,\\\/#!$%\^&\*;:{}=\-_\'`~\(\)\"[\|]/g, " ");
}

ContentToWordsArray = (content) =>
{
  // => split content by space to get a array of words
  return content.split(" ");
}

GetCleanedWords = (pageContent) =>
{
  const words = ContentToWordsArray(pageContent);
  const cleanedwords = this.CleanupWords(words);
  return cleanedwords;
}

/**
 * Build the index by:
 * - adding each word not present in index
 * - adding for each word the current slug to the existing list for the current word processed
 *
 * @param {Object} searchIndex The index output
 * @param {Array} words The list of words in the page currently processed
 * @param {Object} currentPage The pag eobject with path to use in the index
 */
exports.DistributeHashedWords = (searchIndex, words, currentPage) => {
  // => add in hash table each word if absent
  words.forEach((word) => {
    if (word === "") return;

    let lowerCase = word.toLowerCase();
    const normalizedWord = removeAccents(lowerCase);
    const hashedWord = Cyrb53(normalizedWord);
    const key = `${normalizedWord}_${hashedWord}`;
    if (!searchIndex.hasOwnProperty(key)) {
      searchIndex[key] = { word: `${word}`, pages: [] };
    }
    //add slug to word if not there
    const title = currentPage.frontmatter.title;
    const slug = currentPage.path;
    if (searchIndex[key].pages.findIndex((page) => page.slug === slug) === -1) {
      searchIndex[key].pages.push({ slug, title });
    }
  });
};

//https://www.30secondsofcode.org/js/s/remove-accents/
const removeAccents = str =>
  str.normalize('NFD').replace(/[\u0300-\u036f]/g, '');

/**
 * Clean up the array given by:
 * - removing the meaningless value (see IsWordMeaningful)
 * - removing the brakets, paranthesis, dot and forward and back slash characters (see CleanWord)
 *
 * @param {Array} words Array of words to clean up
 * @returns Array of cleaned words
 */
exports.CleanupWords = (words) => {
  const meaningfulWords = words.filter((word) => this.IsWordMeaningful(word));
  const cleanedWords = [];
  for (let index = 0; index < meaningfulWords.length; index++) {
    let meaningfulWord = meaningfulWords[index];

    const cleanedWord = this.CleanWord(meaningfulWord);
    const cleanedWordContainingSpace = cleanedWord.split(" ");
    cleanedWords.push(...cleanedWordContainingSpace);

    // throw new Error(
    //   `Runtime error => ${meaningfulWord} slipt through the cracks... Need to handle it!`
    // );
  }

  if (enableLogs) console.log(cleanedWords);
  return cleanedWords;
};

exports.CleanWord = (meaningfulWord) => {
  // const wordContainsTargetChars = meaningfulWord.match(
  //   /(\([^()]*$|^[^()]*\)$|\([^()])|(\[[^()]*$|^[^()]*\]$|\([^()])/
  // );

    let cleanedWord = meaningfulWord;

    let charactersToRemove= [".", ":", "`", "[", '(',')',"{","}",",","\\","*","**",`"`,`""`,"“","…","→","–","»*","»","«","©", "|"]
    charactersToRemove.forEach(char => {
      if (meaningfulWord.includes(char)) {
        cleanedWord = cleanedWord.replace(char, "");
        if (enableLogs)
          console.log(`'${meaningfulWord}' became "${cleanedWord}"`);
      }
      
    });
    if (meaningfulWord.includes("\\")) {
      cleanedWord = cleanedWord.replace("\\", " ");
      if (enableLogs)
        console.log(`'${meaningfulWord}' became "${cleanedWord}"`);
    }
    if (meaningfulWord.includes("/")) {
      cleanedWord = cleanedWord.replace("/", " ");
      if (enableLogs)
        console.log(`'${meaningfulWord}' became "${cleanedWord}"`);
    }
    if (meaningfulWord.includes(".")) {
      cleanedWord = cleanedWord.replace(".", " ");
      if (enableLogs)
        console.log(`'${meaningfulWord}' became "${cleanedWord}"`);
    }
    if (meaningfulWord.includes("]")) {
      const indexClosingBraket = meaningfulWord.indexOf("]");
      cleanedWord = cleanedWord.substring(0, indexClosingBraket);
      if (enableLogs)
        console.log(`'${meaningfulWord}' became "${cleanedWord}"`);
    }
    return cleanedWord;
};

/**
 * Check if the word:
 * - doesn't contain a single dash
 * - doesn't contain a triple dash
 * - doesn't contain a hashtag
 * - doesn't contain the string "title:"
 * - doesn't contain the string "category:"
 * - doesn't contain the string "tag:"
 * - doesn't contain the string "isDraft:" or starts with "isDraft:"
 *
 * @param {String} word The word to check
 * @returns True|False
 */
exports.IsWordMeaningful = (word) => {
  if (word.length < 2) return false;
  if (word === "|") return false;
  if (word === "false") return false;
  if (word === "") return false;
  if (word === ":") return false;
  if (word === "::") return false;
  if (word === "-") return false;
  if (word === "&") return false;
  if (word === "=") return false;
  if (word === "+") return false;
  if (word === "_") return false;
  if (word === "?") return false;
  if (word === "---") return false; //frontmatter start and end tag
  if (word.includes("#")) return false;
  if (word.includes("isDraft:")) return false; //frontmatter prop
  if (word.startsWith("isDraft:")) return false; //frontmatter prop
  if (word.includes("title:")) return false; //frontmatter prop
  if (word.includes("category:")) return false; //frontmatter prop
  if (word.includes("tag:")) return false; //frontmatter prop
  if (word.includes("home:")) return false; //frontmatter prop on home page
  if (word.includes("containerClass:")) return false; //frontmatter prop on home page
  if (word.includes("home-page")) return false; //frontmatter prop value on home page
  if (word.includes("heroText:")) return false; //frontmatter prop on home page
  if (word.includes("heroImage:")) return false; //frontmatter prop on home page
  if (word.includes(".png")) return false; //images don't need to be in the index
  if (word.includes(".gif")) return false; //images don't need to be in the index
  if (word.includes(".jpeg")) return false; //images don't need to be in the index
  if (word.includes(".jpg")) return false; //images don't need to be in the index
  if (word.includes("_pages/about")) return false; //relative link
  if (word.includes("_shared/search-tips-intro.md")) return false;
  if (word.includes("<!--")) return false;
  if (word.includes("-->")) return false;
  if (word.includes("markdownlint-disable")) return false;
  if (word.includes("MD033")) return false;
  if (word.includes("MD041")) return false;
  if (word.includes("<SearchModule")) return false;
  if (word.includes(">")) return false;
  if (word.includes("<")) return false;
  if (word.includes("--------")) return false;
  if (word.includes("----------")) return false;
  if (word.includes("-----------")) return false;
  if (word.includes("------------------------------------------"))
    return false;
  if (word.includes("---------------------------------------")) return false;
  if (word.includes("::tip")) return false;
  if (word.includes("ObjsubOjg.subSubObj")) return false;
  if (word.includes("/")) return false;
  if (word.includes("``csharp")) return false;
  if (word.includes("//<summary>")) return false;
  if (word.includes("//")) return false;
  if (word.includes("//</summary>")) return false;
  if (word.includes("``")) return false;
  if (word.includes('NL_SiteWeb_TEC_XY.Z.docx"')) return false;
  if (word.includes("*1")) return false;
  if (word.includes('From"')) return false;
  if (word.includes("tfs-at")) return false;
  if (word.includes("be\\")) return false;
  if (word.includes("ITFG\\")) return false;
  if (word.includes("Rxx]")) return false;
  if (word.includes("TEC/Sujet")) return false;
  if (word.includes("*X")) return false;
  if (word.includes("1*")) return false;
  if (word.includes("*Y")) return false;
  if (word.includes("*Z")) return false;
  if (word.includes("PEAGE\\\\BACK-OFFICE\\\\Template")) return false;
  if (word.includes("--install-extension")) return false;
  if (word.includes("akamudvscode-theme-onedark")) return false;
  if (word.includes("alexdimacopy-relative-path")) return false;
  if (word.includes("bmaupincopy-without-formatting")) return false;
  if (word.includes("capajvscode-standardjs-snippets")) return false;
  if (word.includes("chenxsanvscode-standardjs")) return false;
  if (word.includes("christian-kohlernpm-intellisense")) return false;
  if (word.includes("christian-kohlerpath-intellisense")) return false;
  if (word.includes("DavidAnsonvscode-markdownlint")) return false;
  if (word.includes("dbaeumervscode-eslint")) return false;
  if (word.includes("esbenpprettier-vscode")) return false;
  if (word.includes("felixfbeckerphp-debug")) return false;
  if (word.includes("formulahendryauto-rename-tag")) return false;
  if (word.includes("hbenlvscode-mocha-test-adapter")) return false;
  if (word.includes("hbenlvscode-test-explorer")) return false;
  if (word.includes("HookyQRbeautify")) return false;
  if (word.includes("jcbuissonvue")) return false;
  if (word.includes("joshpengsublime-babel-vscode")) return false;
  if (word.includes("mrmlncvscode-scss")) return false;
  if (word.includes("ms-mssqlmssql")) return false;
  if (word.includes("ms-vscodepowershell")) return false;
  if (word.includes("ms-vscodesublime-keybindings")) return false;
  if (word.includes("ms-vscodeTheme-MarkdownKit")) return false;
  if (word.includes("msjsdiagdebugger-for-chrome")) return false;
  if (word.includes("mycelooracle-plsql")) return false;
  if (word.includes("octrefvetur")) return false;
  if (word.includes("peakchen90vue-beautify")) return false;
  if (word.includes("pranaygpvscode-css-peek")) return false;
  if (word.includes("robinbentleysass-indented")) return false;
  if (word.includes("sdrasvue-vscode-snippets")) return false;
  if (word.includes("Shancode-settings-sync")) return false;
  if (word.includes("shd101wyymarkdown-preview-enhanced")) return false;
  if (word.includes("spoonscenes6-mocha-snippets")) return false;
  if (word.includes("spywhereguides")) return false;
  if (word.includes("techeropen-in-browser")) return false;
  if (word.includes("xabikosJavaScriptSnippets")) return false;
  if (word.includes("yzanemarkdown-pdf")) return false;
  if (word.includes("_DRAFT_")) return false;
  if (word.includes("%20`")) return false;
  if (word.includes("``md")) return false;
  if (word.includes("copy-relative-path")) return false;
  if (word.includes("GeneralInformation.md")) return false;
  if (word.includes("*+")) return false;
  if (word.includes("=>")) return false;
  if (word.includes("4+")) return false;
  if (word.includes("T0+14s")) return false;
  if (word.includes("T0+29s")) return false;
  if (word.includes(".docx")) return false;
  if (word.includes(".xlsx")) return false;
  if (word.includes("icon=icon\"")) return false;
  if (word.includes("2*")) return false;
  return true;
};
